/*
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A 
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR 
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION 
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE 
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO 
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO 
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE 
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY 
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 */

/*
 * 
 *
 * This file is a generated sample test application.
 *
 * This application is intended to test and/or illustrate some 
 * functionality of your system.  The contents of this file may
 * vary depending on the IP in your system and may use existing
 * IP driver functions.  These drivers will be generated in your
 * SDK application project when you run the "Generate Libraries" menu item.
 *
 */

#include <stdio.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xgpio.h"
#include "gpio_header.h"
#define CHANNEL 1
/*(Mhz/2^bits)/ bpm / 60*/
#define DELAY (390625)/(70/60)

const int A[9] = {3551, 1776, 888, 444, 222, 111, 55, 28, 14};
const int As[9] = {3351, 1676, 838, 419, 209, 105, 52, 26, 13};
const int B[9] = {3163, 1582, 791, 395, 198, 99, 49, 25, 12};
const int C[9] = {5973, 2986, 1493,747, 373, 187, 93, 47, 23};
const int Cs[9] = {5638, 2818, 1409, 705, 352, 176, 88, 44, 22};
const int D[9] = {5322, 2660, 1330, 665, 333, 166, 83, 42, 21};
const int Ds[9] = {5021, 2511, 1256, 628, 314, 157, 78, 39, 20};
const int E[9] = {4741, 2370, 1185, 593, 296, 148, 74, 37, 19};
const int F[9] = {4473, 2237, 1119, 559, 280, 140, 70, 35, 17};
const int Fs[9] = {4224, 2111, 1056, 528, 264, 132, 66, 33, 16};
const int G[9] = {3986, 1993, 996, 498, 249, 125, 62, 31, 16};
const int Gs[9] = {3762, 1881, 941, 470, 235, 118, 59, 29, 15};


int notes[] = {D[4],A[4],D[4],A[5],G[4],Fs[4],E[4],Cs[4],2,Cs[4],A[4],Cs[4],Fs[4],E[4],
		Cs[4],D[4],Fs[4],2,D[4],Cs[4],D[4],A[5],G[4],Fs[4],E[4],Cs[4],2,Cs[4],A[4],
		Cs[4],Fs[4],E[4],Cs[4],Ds[4],Fs[4],2,Fs[4],A[4],G[4],A[4],G[4],Fs[4],E[4],
		Cs[4],E[4],Fs[4],G[4],Fs[4],E[4],D[4],Fs[4],A[4],G[4],Fs[4],G[4],A[5],B[5],
		A[4],G[4],Fs[4],G[4],Fs[4],G[4],Fs[4],E[4],D[4]};



int delayTime[] = {1,1,1,2,2,1,1,3,4,1,1,1,2,2,1,1,3,4,1,1,1,2,2,1,1,3,4,1,1,1,2,2,1,1,3,4,4,4,1,1,1,1,4,4,4,1,1,1,1,4,4,4,1,1,1,1,4,2,1,1,4,1,1,1,1,4};

int music[66];
XGpio Gpio;
XGpio Gpio2;

int compose(u16 DeviceId_LED, u16 DeviceId_Audio, u32 GpioWidth);


int main () 
{
	Xil_ICacheEnable();
	Xil_DCacheEnable();
	print("---Entering main---\n\r");


	for(int i = 0; i <sizeof(music); i++){

		music[i] = notes[i];

	}

   while(1){
	   u32 status = compose(XPAR_AXI_GPIO_0_DEVICE_ID, XPAR_AXI_GPIO_1_DEVICE_ID, 9);
      
   }
   print("---Exiting main---\n\r");
   Xil_DCacheDisable();
   Xil_ICacheDisable();
   return 0;
}

int compose(u16 DeviceID_LED, u16 DeviceID_LED_Audio, u32 GpioWidth){

	volatile int Delay;
	int Status;
	Status = XGpio_Initialize(&Gpio, DeviceID_LED);
	Status = XGpio_Initialize(&Gpio2, DeviceID_LED_Audio);

	if(Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	XGpio_SetDataDirection(&Gpio, 1, 0x0);
	XGpio_SetDataDirection(&Gpio, 2, 0x0);

	for(int i = 0; i < sizeof(music)/sizeof(music[0]); i++){
		XGpio_DiscreteWrite(&Gpio, CHANNEL, music[i]);
		XGpio_DiscreteWrite(&Gpio2, CHANNEL, music[i]);

		for(Delay = 0; Delay < DELAY*delayTime[i]; Delay++);

		XGpio_DiscreteClear(&Gpio2, CHANNEL, 0);
		XGpio_DiscreteClear(&Gpio, CHANNEL, 0);

	}

	XGpio_DiscreteWrite(&Gpio, CHANNEL, 2);
	XGpio_DiscreteWrite(&Gpio2, CHANNEL, 2);

	return XST_SUCCESS;

}